Answer the following:

1) What are the access control modifiers (acm) provided in Java?
    private, public, protected, default (very much like protected)
2) Briefly explain each acm and how they differentiate from each other?
    protected is still accessible via subclasses, default is not. private is accessible only to members of the same class
3) Why do we use acm's?
    to restrict or grant access from data in classes by other classes
4) What is the risk of not using acm's?

5) Write a method signature that receives an object of type "Car" as a parameter.
    public void myMethod (Car type) {}
6) Write a method signature that returns an object of type "Car".
    public Car myMethod () {}
7) What is a very important consideration to keep in mind when passing objects (hint: by reference) from one
method to another?
    *it changes the pass by value (primitive types) - everyone gets its own copy
     vs pass by reference (object types) - doesn't make a copy, changes the reference to the object passed
8) What is method overloading?
    methods with the same signature but with different parameters
9) Why is method overloading useful? (Hint: as compared to the implementation in the C language.)
    reinforces polymorphism
10) How do you overload a method? What signifies that a method is being overloaded?

11) Below, by writing just the method signature, demonstrate overloading a method 3 times.

12) How do you overload a constructor? What signifies that a constructor is being overloaded?

13) Why do we overload constructors?
    allows objects to be created in multiple ways
14) Below, by writing just the constructor signature, demonstrate overloading a constructor 3 times.

15) What is recursion?
    base case = when the recursion stops
16) What important considerations must you keep in mind when using recursion?
    hard to debug, hard to maintain, causes stack overflow errors
17) How do you make a method recursive?

18) How do you escape a recursive method?
    the "base case"
    if (i == 0)
        return;
19) Explain what "static" is all about?
    a member can be accessed before an object of the class is created
20) When should you use "static"?
    when the member(s) can/are independent of any class object
21) What differentiates static variables from instance variables?
    static variables are inherently part of their class
22) What is a the quicksort? Briefly describe how the quicksort works.
    partition an array into two sections
23) What is a nested, or inner, class?

24) What is the scope of a nested class?

25) What is a variable-arity method?
    varargs (variable length argument list) defined with ...
26) What makes a variable-arity method unique? When should you use it?

27) What is the shorthand name for variable-arity?
    varargs
28) Why important considerations must you keep in mind when using variable-arity methods? (hint: ambiguity)
    vargars must always be the last argument in the parameters list